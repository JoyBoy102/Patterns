#include <iostream>
#include <stack>
#include <conio.h>
#include <map>
#include <vector>
using namespace std;

class IShape {
public:
	virtual void save(FILE* stream) = 0;
	virtual void load(FILE* stream) = 0;
	virtual ~IShape() {}
};

class Point : public IShape {
private:
	int x, y;
public:
	Point(int _x, int _y) :x(_x), y(_y) {}
	void save(FILE* stream) override {
		if (stream != nullptr) {
			fprintf(stream, "%c\n", 'P');
			fprintf(stream, "%d %d\n", x, y);
		}
	}
	void load(FILE* stream) override {
		if (stream != nullptr)
			fscanf(stream, "%d %d\n", &x, &y);
	}
};

class Circle : public IShape {
private:
	int x, y, r;
public:
	Circle(int _x, int _y, int _r) :x(_x), y(_y), r(_r) {}
	void save(FILE* stream) override {
		if (stream != nullptr) {
			fprintf(stream, "%c\n", 'C');
			fprintf(stream, "%d %d %d\n", x, y, r);
		}
	}
	void load(FILE* stream) override {
		if (stream != nullptr)
			fscanf(stream, "%d %d %d\n", &x, &y, &r);
	}
};

class ShapeArray {
protected:
	vector<IShape*> shapes;
public:
	virtual IShape* create_shape(char code) {
		return nullptr;
	}
	void loadShapes(const string& filename) {
		FILE* stream;
		char c;
		int count;
		if ((stream = fopen(filename.c_str(), "r")) != nullptr) {
			fscanf(stream, "%d\n", &count);
			for (int i = 0; i < count; i++) {
				fscanf(stream, "%c\n", &c);
				IShape* shape = create_shape(c);
				if (shape != nullptr) {
					shape->load(stream);
					shapes.push_back(shape);
				}
			}
			fclose(stream);
		}
	}

	~ShapeArray() {
		for (IShape* shape : shapes) {
			delete shape;
		}
		shapes.clear();
	}
};

class MyShapeArray : public ShapeArray {
public:
	IShape* create_shape(char code) override {
		IShape* shape = nullptr;
		switch (code) {
		case 'P':
			shape = new Point(0, 0);
			break;
		case 'C':
			shape = new Circle(0, 0, 0);
			break;
		}
		return shape;
	}
};

int main()
{
	FILE* stream = fopen("data.txt", "w");
	if (stream) {
		fprintf(stream, "%d\n", 2);
		IShape* p = new Point(2, 2);
		IShape* c = new Circle(4, 4, 4);
		p->save(stream);
		c->save(stream);
		delete p;
		delete c;
		fclose(stream);
	}

	MyShapeArray sa;
	sa.loadShapes("data.txt");

	return 0;
}
